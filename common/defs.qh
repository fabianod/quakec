#define ID1 1
//#pragma warning disable Q302 	// WARN_NOTREFERENCED		prevent fteqcc from warning when variables were not used
//#pragma warning disable Q105 	// WARN_TOOFEWPARAMS
//#pragma warning disable Q101 	// WARN_TOOMANYPARAMS
//#pragma warning disable Q106 	// WARN_ASSIGNMENTTOCONSTANT
//#pragma warning disable Q203 	// WARN_MISSINGRETURNVALUE
//#pragma warning disable Q204 	// WARN_WRONGRETURNTYPE
//#pragma warning disable Q205 	// WARN_POINTLESSSTATEMENT	prevent warnings about hanging ; charactures (indications of additional ones, eg: if (blah);)
//#pragma warning disable Q206 	// WARN_MISSINGRETURN
//#pragma warning disable Q207 	// WARN_DUPLICATEDEFINITION
//#pragma warning disable Q100 	// WARN_PRECOMPILERMESSAGE
//#pragma warning disable Q120 	// WARN_BADPRAGMA		disable the warning for unrecognised pragmas
//#pragma warning disable Q111 	// WARN_DUPLICATELABEL
//#pragma warning disable Q201 	// WARN_ASSIGNMENTINCONDITIONAL	disable the assignment in conditional warnings
//#pragma warning disable F300 	// WARN_DEADCODE

/*
==============================================================================

			SOURCE FOR GLOBALVARS_T C STRUCTURE

==============================================================================
*/

//
// system globals
//
entity		self;
entity		other;
entity		world;
float		time;
float		frametime;

float		force_retouch;		// force all entities to touch triggers
					// next frame.  this is needed because
					// non-moving things don't normally scan
					// for triggers, and when a trigger is
					// created (like a teleport trigger), it
					// needs to catch everything.
					// decremented each frame, so set to 2
					// to guarantee everything is touched
string		mapname;

float		deathmatch;
float		coop;
float		teamplay;

float		serverflags;		// propagated from level to level, used to
					// keep track of completed episodes

float		total_secrets;
float		total_monsters;

float		found_secrets;		// number of secrets found
float		killed_monsters;	// number of monsters killed


// spawnparms are used to encode information about clients across server
// level changes
float		parm1, parm2, parm3, parm4, parm5, parm6, parm7, parm8, parm9, parm10, parm11, parm12, parm13, parm14, parm15, parm16;

//
// global variables set by built in functions
//	

// set by makevectors()
vector		v_forward, v_up, v_right;
	
// set by traceline / tracebox
float		trace_allsolid;
float		trace_startsolid;
float		trace_fraction;
vector		trace_endpos;
vector		trace_plane_normal;
float		trace_plane_dist;
entity		trace_ent;
float		trace_inopen;
float		trace_inwater;

entity		msg_entity;		// destination of single entity writes

//
// required prog functions
//
void() 		main;			// only for testing

void()		StartFrame;

void() 		PlayerPreThink;
void() 		PlayerPostThink;

void()		ClientKill;
void()		ClientConnect;
void() 		PutClientInServer;	// call after setting the parm1... parms
void()		ClientDisconnect;

void()		SetNewParms;		// called when a client first connects to
					// a server. sets parms so they can be
					// saved off for restarts

void()		SetChangeParms;		// call to set parms for self so they can
					// be saved for a level transition


//================================================
void		end_sys_globals;		// flag for structure dumping
//================================================

/*
==============================================================================

			SOURCE FOR ENTVARS_T C STRUCTURE

==============================================================================
*/

//
// system fields (*** = do not set in prog code, maintained by C code)
//
.float		modelindex;		// *** model index in the precached list
.vector		absmin, absmax;		// *** origin + mins / maxs

.float		ltime;			// local time for entity
.float		movetype;
.float		solid;

.vector		origin;			// ***
.vector		oldorigin;		// ***
.vector		velocity;
.vector		angles;
.vector		avelocity;

.vector		punchangle;		// temp angle adjust from damage or recoil

.string		classname;		// spawn function
.string		model;
.float		frame;
.float		skin;
.float		effects;

.vector		mins, maxs;		// bounding box extents reletive to origin
.vector		size;			// maxs - mins

.void()		touch;
.void()		use;
.void()		think;
.void()		blocked;		// for doors or plats, called when can't push other

.float		nextthink;
.entity		groundentity;

// stats
.float		health;
.float		frags;
.float		weapon;			// one of the IT_SHOTGUN, etc flags
.string		weaponmodel;
.float		weaponframe;
.float		currentammo;
.float		ammo_shells, ammo_nails, ammo_rockets, ammo_cells;

.float		items;			// bit flags

.float		takedamage;
.entity		chain;
.float		deadflag;

.vector		view_ofs;		// add to origin to get eye point


.float		button0;		// fire
.float		button1;		// use
.float		button2;		// jump

.float		impulse;		// weapon changes

.float		fixangle;
.vector		v_angle;		// view / targeting angle for players
.float		idealpitch;		// calculated pitch angle for lookup up slopes


.string		netname;

.entity 	enemy;

.float		flags;

.float		colormap;
.float		team;

.float		max_health;		// players maximum health is stored here

.float		teleport_time;		// don't back up

.float		armortype;		// save this fraction of incoming damage
.float		armorvalue;

.float		waterlevel;		// 0 = not in, 1 = feet, 2 = waist, 3 = eyes
.float		watertype;		// a contents value

.float		ideal_yaw;
.float		yaw_speed;

.entity		aiment;

.entity 	goalentity;		// a movetarget or an enemy

.float		spawnflags;

.string		target;
.string		targetname;

// damage is accumulated through a frame. and sent as one single
// message, so the super shotgun doesn't generate huge messages
.float		dmg_take;
.float		dmg_save;
.entity		dmg_inflictor;

.entity		owner;			// who launched a missile
.vector		movedir;		// mostly for doors, but also used for waterjump

.string		message;		// trigger messages

.float		sounds;			// either a cd track number or sound number

.string		noise, noise1, noise2, noise3;	// contains names of wavs to play

//================================================
void		end_sys_fields;			// flag for structure dumping
//================================================

/*
==============================================================================

				VARS NOT REFERENCED BY C CODE

==============================================================================
*/
//
// globals
//
float		gameover;		// set when a rule exits

string		string_null;		// null string, nothing should be held here
float		empty_float;
vector		null_vector;
entity		null_entity;

entity		newmis;			// launch_spike sets this after spawning it

entity		sight_entity;
float		sight_entity_time;

entity		activator;		// the entity that activated a trigger or brush

entity		damage_attacker, damage_inflictor;	// set by T_Damage

float		framecount;
float		skill;
float		sv_gravity;
float		nomonsters;

float 		modelindex_eyes, modelindex_player;			// client
float		intermission_running, intermission_exittime;

entity		bodyque_head;						// world
entity		lastspawn;
string 		nextmap;
entity 		creaturetocheck;

entity		le1, le2;		//for bosses
float		lightning_end;
entity 		shub, shub_killer;

var float	autocvar_chase_active = 0;

//
// world fields (FIXME: make globals)
//
.string		wad;
.string 	map;
.float		worldtype;	// 0=medieval 1=metal 2=base

.string		killtarget;

//
// quaked fields
//
.float		light_lev;	// not used by game, but parsed by light util
.float		style;

//
// monster ai
//
.void()							th_stand;
.void()							th_walk;
.void()							th_run;
.void()							th_missile;
.void()							th_melee;
.void(entity attacker, float damage)			th_pain;
.void(entity killer, float health)			th_die;
.void() 						th_sight;
.void(string headgib, float damage, float gibtype) 	th_gib;
.void() 						th_jump;
//.void() 						th_launch; 	// called when kinetically disturbed

.float		enemy_vis, enemy_infront, enemy_range, enemy_yaw;	// monster logic
.float		enemy_found;
.float		movedist;

.entity		oldenemy;		// mad at this player before taking damage
.float		speed;
.float		lefty;
.float		search_time;
.float		attack_state;
.float 		inpain;			// zombie
.float 		idealroll;
.float		roll_speed;
.float		attacking;

//
// player only fields
//
.float		walkframe;

.float 		attack_finished;
.float		pain_finished;
.float		smoke_finished;

.float		invincible_finished;
.float		invisible_finished;
.float		super_damage_finished;
.float		radsuit_finished;

.float		invincible_time, invincible_sound;
.float		invisible_time, invisible_sound;
.float		super_time, super_sound;
.float		rad_time;
.float		fly_sound;

.float		axhitme;
//.float	spikehitme;
//.float	spiketime;

.float		show_hostile;		// set to time+0.2 whenever a client fires a
					// weapon or takes damage.  Used to alert
					// monsters that otherwise would let the player go
.float		jump_flag;		// player jump flag
.float		swim_flag;		// player swimming sound flag
.float		air_finished;		// when time > air_finished, start drowning
.float		bubble_count;		// keeps track of the number of bubbles
.string		deathtype;		// keeps track of how the player died

.float 		bubble_time;
.float 		dmgtime;
.float 		drown_finished;
.float		nextfootstep;

.float		fadethink;
.float		fadetime;
.float		faderate;

.float 		multi_damage;
.entity		multi_damage_ent;

.entity		invisweapon;
.entity		radiusdamagechain;

.float 		gib;			// type of gib
.string 	headname;		// mdl of the head
.float 		corpsehealth;		// health of monster's corpse
.float		gibhealth;		// gib threshold
.float		mass;			

//.string		classname2;		//info_notnull
//.void()		think2;
//.float		nextthink2;
//.entity		cloneentity;

//
// object stuff
//
.string		mdl;
.vector		mangle;			// angle at start
.vector		oldorigin;		// only used by secret door
.float		t_length, t_width;

.float		gravity;

//
// doors, etc
//
.vector		dest, dest1, dest2;
.float		wait;			// time from firing to restarting
.float		delay;			// time from activation to firing
.entity		trigger_field;		// door's trigger entity
.string		noise4;

//
// monsters
//
.float 		pausetime;
.entity 	movetarget;
//.float 	grenade_angle;		// used by ogre

//
// doors
//
.float		aflag;
.float		dmg;			// damage done by door when hit
	
//
// misc
//
.float		cnt; 			// misc flag
.float		healamount, healtype;	// medkits
	
//
// subs
//
.void()		think1;
.vector		finaldest, finalangle;

//
// triggers
//
.float		count;			// for counting triggers
.float 		hurt_together_time;
.float 		hurt_nextthink;

//
// plats / doors / buttons
//
.float		lip;
.float		state;
.vector		pos1, pos2;		// top and bottom positions
.float		height;

.float		waitmin, waitmax;
.float		distance;
.float		volume;

//===========================================================================

//
// builtin functions
//

void(vector ang) makevectors			= #1;		// sets v_forward, etc globals
void(entity e, vector o) setorigin		= #2;
void(entity e, string m) setmodel		= #3;		// set movetype and solid first
void(entity e, vector min, vector max) setsize 	= #4;
// #5 was removed
void() break					= #6;
float() random					= #7;		// returns 0 - 1
// void(entity e, float chan, string samp, float vol, float atten) sound = #8;
vector(vector v) normalize			= #9;
void(string e) error				= #10;
void(string e) objerror				= #11;
float(vector v) vlen				= #12;
float(vector v) vectoyaw			= #13;
entity() spawn					= #14;
void(entity e) remove				= #15;

// sets trace_* globals
// nomonsters can be:
// An entity will also be ignored for testing if forent == test,
// forent->owner == test, or test->owner == forent
// a forent of world is ignored
void(vector v1, vector v2, float nomonsters, entity forent) traceline = #16;	

entity() checkclient					= #17;		// returns a client to look for
entity(entity start, .string fld, string match) find 	= #18;
string(string s) precache_sound				= #19;
string(string s) precache_model				= #20;
// void(entity client, string s)stuffcmd 		= #21;
entity(vector org, float rad) findradius 		= #22;
void(string s) bprint					= #23;
// void(entity client, string s, ...) sprint 		= #24;
void(string s, ...) dprint					= #25;
string(float f) ftos					= #26;
string(vector v) vtos					= #27;
void() coredump						= #28;		// prints all edicts
void() traceon						= #29;		// turns statment trace on
void() traceoff						= #30;
void(entity e) eprint					= #31;		// prints an entire edict
float(float yaw, float dist) walkmove			= #32;		// returns TRUE or FALSE
// #33 was removed
float(float yaw, float dist) droptofloor 		= #34;		// TRUE if landed on floor
void(float style, string value) lightstyle 		= #35;
float(float v) rint					= #36;		// round to nearest int
float(float v) floor					= #37;		// largest integer <= v
float(float v) ceil					= #38;		// smallest integer >= v
// #39 was removed
float(entity e) checkbottom				= #40;		// true if self is on ground
float(vector v) pointcontents				= #41;		// returns a CONTENT_*
// #42 was removed
float(float f) fabs = #43;
// vector(entity e, float speed) aim 			= #44;		// returns the shooting vector
float(string s) cvar 					= #45;		// return cvar.value
void(string s) localcmd 				= #46;		// put string into local que
entity(entity e) nextent 				= #47;		// for looping through all ents
void(vector o, vector d, float color, float count) particle = #48;	// start a particle effect
void() changeyaw 					= #49;		// turn towards self.ideal_yaw
									// at self.yaw_speed
// #50 was removed
vector(vector v) vectoangles				= #51;

//
// direct client message generation
//
//	void(float to, float f) WriteByte		= #52;
//	void(float to, float f) WriteChar		= #53;
//	void(float to, float f) WriteShort		= #54;
//	void(float to, float f) WriteLong		= #55;
//	void(float to, float f) WriteCoord		= #56;
//	void(float to, float f) WriteAngle		= #57;
//	void(float to, string s) WriteString		= #58;
//	void(float to, entity s) WriteEntity		= #59;

//
// broadcast client message generation
//

// void(float f) bWriteByte				= #59;
// void(float f) bWriteChar				= #60;
// void(float f) bWriteShort				= #61;
// void(float f) bWriteLong				= #62;
// void(float f) bWriteCoord				= #63;
// void(float f) bWriteAngle				= #64;
// void(string s) bWriteString				= #65;
// void(entity e) bWriteEntity 				= #66;

void(float step) movetogoal				= #67;

string(string s) precache_file				= #68;	// no effect except for -copy
void(entity e) makestatic				= #69;
void(string s) changelevel 				= #70;

//#71 was removed

void(string var, string val) cvar_set 			= #72;	// sets cvar.value
// void(entity client, string s, ...) centerprint 		= #73;	// sprint, but in middle

void(vector pos, string samp, float vol, float atten) ambientsound = #74;

string(string s) precache_model2			= #75;		// registered version only
string(string s) precache_sound2			= #76;		// registered version only
string(string s) precache_file2				= #77;		// registered version only

// void(entity e) setspawnparms				= #78;		// set parm1... to the
									// values at level start
									// for coop respawn

//============================================================================
//
// subs.qc
//
void(vector tdest, float tspeed, void() func) SUB_CalcMove;
void(entity ent, vector tdest, float tspeed, void() func) SUB_CalcMoveEnt;
void(vector destangle, float tspeed, void() func) SUB_CalcAngleMove;
void() SUB_CalcMoveDone;
void() SUB_CalcAngleMoveDone;
void() SUB_Null;
void() SUB_UseTargets;
void() SUB_Remove;

//
//	damage.qc
//
void(entity targ, entity inflictor, entity attacker, float damage, string dtype) T_Damage;
void(entity inflictor, entity attacker, float damage, entity ignore, string dtype) T_RadiusDamage;
float (entity e, float amount, float ignore) T_Heal; // health function
void(entity targ, entity attacker) ClientObituary;
float(entity targ, entity inflictor) CanDamage;
void(entity targ, entity attacker) Killed;

//
//	gibs.qc
//
void(entity ent, vector org, vector vel, float damage) SpawnBlood;
void(entity ent, vector vel, float damage) SpawnBlood_Expl;
void(float damage) spawn_touchblood;
void(vector org, vector vel) SpawnMeatSpray;
void(string gibname, float dm, vector dir) ThrowGib;
void(string gibname, float dm, vector dir) ThrowHead;
void(vector bmins, vector bmaxs) body_solid;
void(vector bmins, vector bmaxs) body_nonsolid;
void() corpse_die;
void(string headname, float dmg, float gib) monster_gib;
void() GibPlayer;
void(entity ent) CopyToBodyQue;
void() InitBodyQue;
float modelindex_eyes;
float modelindex_player;

float(entity ent) CheckQuad;
void() player_run;
void() ImpulseCommands;
void() SuperDamageSound;

//
//	weapon_trace.qc
//
void(vector start, vector end, float noents, entity attacker) weapontraceline;
void() ApplyMultiDamage;
void(float damage, vector dir) TraceAttack;
void(float shotcount, vector dir, vector spread) FireBullets;
void(vector p1, vector p2, entity from, float damage) LightningDamage;

//
//	weapon_projectile.qc
//
void() spike_touch;
void() FakeSpike_touch;
void() superspike_touch;
void() spike_think; 
void(vector org, vector dir) launch_spike;
void() missile_think; 
void() grenade_think; 
void() GrenadeTouch;
void() T_MissileTouch;

void(entity ent) slope_angles;
void(entity ent) changeroll;
float(entity ent) entwaterlevel;
float(entity ent) entwatertype;