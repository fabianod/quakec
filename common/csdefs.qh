//NOTE: THIS IS AN INTERFACE FILE. DO NOT EDIT.
//MODIFYING THIS FILE CAN RESULT IN CRC ERRORS.
//YOU HAVE BEEN WARNED.

//feel free to look though. :)

//#define CSQC 1

//#pragma warning disable Q302 	// WARN_NOTREFERENCED		prevent fteqcc from warning when variables were not used
//#pragma warning disable Q105 	// WARN_TOOFEWPARAMS
//#pragma warning disable Q101 	// WARN_TOOMANYPARAMS
//#pragma warning disable Q106 	// WARN_ASSIGNMENTTOCONSTANT
//#pragma warning disable Q203 	// WARN_MISSINGRETURNVALUE
//#pragma warning disable Q204 	// WARN_WRONGRETURNTYPE
//#pragma warning disable Q205 	// WARN_POINTLESSSTATEMENT	prevent warnings about hanging ; charactures (indications of additional ones, eg: if (blah);)
//#pragma warning disable Q206 	// WARN_MISSINGRETURN
//#pragma warning disable Q207 	// WARN_DUPLICATEDEFINITION
//#pragma warning disable Q100 	// WARN_PRECOMPILERMESSAGE
//#pragma warning disable Q120 	// WARN_BADPRAGMA		disable the warning for unrecognised pragmas
//#pragma warning disable Q111 	// WARN_DUPLICATELABEL
//#pragma warning disable Q201 	// WARN_ASSIGNMENTINCONDITIONAL	disable the assignment in conditional warnings
//#pragma warning disable F300 	// WARN_DEADCODE

/*
==============================================================================

			SOURCE FOR GLOBALVARS_T C STRUCTURE
			MUST NOT BE MODIFIED, OR CRC ERRORS WILL APPEAR

==============================================================================
*/

//
// system globals
//
entity		self;
entity		other;
entity		world;
float		time;
float		frametime;

float 		player_localentnum;	//the entnum
float 		player_localnum;	//the playernum
float		maxclients;		//a constant filled in by the engine. gah, portability eh?

float		clientcommandframe;	//player movement
float		servercommandframe;	//clientframe echoed off the server


string		mapname;

//
// global variables set by built in functions
//
vector		v_forward, v_up, v_right;	// set by makevectors()

// set by traceline / tracebox
float		trace_allsolid;
float		trace_startsolid;
float		trace_fraction;
vector		trace_endpos;
vector		trace_plane_normal;
float		trace_plane_dist;
entity		trace_ent;
float		trace_inopen;
float		trace_inwater;

//
// required prog functions
//
void()						CSQC_Init;
void()						CSQC_Shutdown;
float(float f, float k, float t, float n)	CSQC_InputEvent;
void(float w, float h)				CSQC_UpdateView;
float(string s)					CSQC_ConsoleCommand;

//these fields are read and set by the default player physics
vector		pmove_org;
vector		pmove_vel;
vector		pmove_mins;
vector		pmove_maxs;

//retrieved from the current movement commands (read by player physics)
float		input_timelength;
vector		input_angles;
vector		input_movevalues;		//forwards, right, up.
float		input_buttons;			//attack, use, jump (default physics only uses jump)

float		movevar_gravity;
float		movevar_stopspeed;
float		movevar_maxspeed;
float		movevar_spectatormaxspeed;	//used by NOCLIP movetypes.
float		movevar_accelerate;
float		movevar_airaccelerate;
float		movevar_wateraccelerate;
float		movevar_friction;
float		movevar_waterfriction;
float		movevar_entgravity;		//the local player's gravity field. Is a multiple (1 is the normal value)

//================================================
void		end_sys_globals;		// flag for structure dumping
//================================================

/*
==============================================================================

			SOURCE FOR ENTVARS_T C STRUCTURE
			MUST NOT BE MODIFIED, OR CRC ERRORS WILL APPEAR

==============================================================================
*/

//
// system fields (*** = do not set in prog code, maintained by C code)
//
.float		modelindex;		// *** model index in the precached list
.vector		absmin, absmax;		// *** origin + mins / maxs


.float		entnum;			// *** the ent number as on the server
.float		drawmask;
.void()		predraw;

.float		movetype;
.float		solid;

.vector		origin;			// ***
.vector		oldorigin;		// ***
.vector		velocity;
.vector		angles;
.vector		avelocity;

.string		classname;		// spawn function
.string		model;
.float		frame;
.float		skin;
.float		effects;

.vector		mins, maxs;		// bounding box extents reletive to origin

.vector		size;			// maxs - mins

.void()		touch;
.void()		use;
.void()		think;
.void()		blocked;		// for doors or plats, called when can't push other

.float		nextthink;

.entity		chain;

.string		netname;

.entity 	enemy;

.float		flags;

.float		colormap;

.entity		owner;			// who launched a missile

//================================================
void		end_sys_fields;			// flag for structure dumping
//================================================



//-----------------------------------------------------------------------------
// BUILTINS
//-----------------------------------------------------------------------------

// 'core' - standard qc minus the funcs that are server specific
// We do not have the server specific ones - they are commented out.

void(vector ang) makevectors				= #1;		// sets v_forward, etc globals
void(entity e, vector o) setorigin			= #2;
void(entity e, string m) setmodel			= #3;		// set movetype and solid first
void(entity e, vector min, vector max) setsize 		= #4;
// #5 was removed
void() break						= #6;
float() random						= #7;		// returns 0 - 1
void (entity e, float chan, string samp) sound		= #8;
vector(vector v) normalize				= #9;
void(string e) error					= #10;
void(string e) objerror					= #11;
float(vector v) vlen					= #12;
float(vector v) vectoyaw				= #13;
entity() spawn						= #14;
void(entity e) remove					= #15;
float(vector v1, vector v2, float tryents, entity ignoreentity) traceline = #16;
//entity() checkclient					= #17;		// returns a client to look for
entity(entity start, .string fld, string match) find	= #18;
void(string s) precache_sound				= #19;
void(string s) precache_model				= #20;
//void(entity client, string s) stuffcmd 		= #21;
entity(vector org, float rad) findradius 		= #22;
//void(string s) bprint					= #23;
//void(entity client, string s) sprint 			= #24;
void(string s) dprint					= #25;
string(float f) ftos					= #26;
string(vector v) vtos					= #27;
void() coredump						= #28;		// prints all edicts
void() traceon						= #29;		// turns statment trace on
void() traceoff						= #30;
void(entity e) eprint					= #31;		// prints an entire edict
float(float yaw, float dist, float settrace) walkmove 	= #32;		// returns TRUE or FALSE, settrace optional
// #33 was removed
float() droptofloor					= #34;		// TRUE if landed on floor
void(float style, string value) lightstyle 		= #35;
float(float v) rint					= #36;		// round to nearest int
float(float v) floor					= #37;		// largest integer <= v
float(float v) ceil					= #38;		// smallest integer >= v
// #39 was removed
float(entity e) checkbottom				= #40;		// true if self is on ground
float(vector v) pointcontents				= #41;		// returns a CONTENT_*
// #42 was removed
float(float f) fabs 					= #43;
//vector(entity e, float speed) aim 			= #44;		// returns the shooting vector
float(string s) cvar 					= #45;		// return cvar.value
void(string s, ...) localcmd				= #46;		// put string into local que
entity(entity e) nextent				= #47;		// for looping through all ents
void(vector o, vector d, float color, float count) particle = #48;	// start a particle effect
void() changeyaw 					= #49;		// turn towards self.ideal_yaw at self.yaw_speed
// #50 was removed
vector(vector v) vectoangles				= #51;
vector(vector v, vector w) vectoangles2 		= #51;
float(float f) sin 					= #60;
float(float f) cos 					= #61;
float(float f) sqrt 					= #62;
void(entity ent) changepitch 				= #63;
void(entity e, entity ignore) tracetoss 		= #64;
string(entity ent) etos 				= #65;
//void(float step) movetogoal				= #67;
string(string s) precache_file				= #68;		// no effect except for -copy
void(entity e) makestatic				= #69;
//void(string s) changelevel 				= #70;
//#71 was removed
void(string var, string val) cvar_set 			= #72;		// sets cvar.value
//void(entity client, string s) centerprint 		= #73;		// sprint, but in middle
void(vector pos, string samp, float vol, float atten) ambientsound = #74;
string(string s) precache_model2			= #75;		// registered version only
string(string s) precache_sound2			= #76;		// registered version only
string(string s) precache_file2				= #77;		// registered version only
//void(entity e) setspawnparms				= #78;		// set parm1... to the values at level start
									// for coop respawn

float	 intermission;		// initially FALSE, set to TRUE when the server sends the SVC_INTERMISSION command

.float() t_remove; 		// called by CSQC_Ent_Remove to clean up this entity,
				// return TRUE if remove(self) should be performed afterward
//.void() predraw;		// called on each entity each time it is about to be added to the scene
				// (by R_AddEntities)
//.void() think;		// called on each entity each frame if self.nextthink <= time + frametime

// this function is called when a transformview message is received (when you enter a warpzone), to allow you to customize the view transform
// return value is new origin
// v_forward, v_right, v_up must be set correctly
// trace_endpos should be set correctly (before call it will be the same value as org)
//.vector(vector org, vector ang, vector forward, vector right, vector up) camera_transform; 

void(string msg)	CSQC_Parse_Print;
void(string msg)	CSQC_Parse_CenterPrint; 
void(string cmd)	CSQC_Parse_StuffCmd;
float(float event)	CSQC_Event;
//entity(float entnum)	CSQC_Ent_Spawn;
void(float isnew)	CSQC_Ent_Update;
void()			CSQC_Ent_Remove;
float()			CSQC_Parse_TempEntity;
void(string msg)	GameCommand;
float(entity ent, float channel, string soundname, float volume, float attenuation, vector pos, float speed100, float sflags) CSQC_Event_Sound;
